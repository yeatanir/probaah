# FILE: cli/main.py
#!/usr/bin/env python3
"""
Probaah CLI - Main entry point
Where research flows naturally (‡¶™‡ßç‡ß∞‡¶¨‡¶æ‡¶π)
"""

import click
import os
import yaml
from datetime import datetime
from pathlib import Path
from rich.console import Console
from rich.table import Table

console = Console()

@click.group()
@click.version_option(version="1.0.0")
def cli():
    """üåä Probaah - Where research flows naturally"""
    console.print("üåä [bold blue]Probaah[/bold blue] (‡¶™‡ßç‡ß∞‡¶¨‡¶æ‡¶π) - Automated Research Workflows", style="bold")

@cli.group()
def project():
    """Project management commands"""
    pass

@cli.group()
def jobs():
    """SLURM job management commands"""
    pass

@cli.group()
def config():
    """Configuration management"""
    pass

@project.command("create")
@click.argument("name")
@click.option("--type", default="reaxff", help="Project type (reaxff, gaussian, ams)")
@click.option("--description", default="", help="Project description")
def create_project(name, type, description):
    """Create a new organized research project"""
    
    # Create project directory with timestamp
    timestamp = datetime.now().strftime("%Y%m%d")
    project_dir = f"{name}_{timestamp}"
    
    # Standard directory structure
    directories = [
        "input_files/templates",
        "input_files/current", 
        "input_files/archive",
        "job_scripts/slurm_templates",
        "job_scripts/active_jobs",
        "job_scripts/completed_jobs",
        "trajectories/raw",
        "trajectories/processed",
        "trajectories/videos",
        "analysis/scripts",
        "analysis/results",
        "analysis/figures",
        "notes/daily_logs",
        "notes/observations"
    ]
    
    console.print(f"üöÄ Creating project: [bold]{project_dir}[/bold]")
    
    try:
        # Create directories
        for dir_path in directories:
            full_path = Path(project_dir) / dir_path
            full_path.mkdir(parents=True, exist_ok=True)
        
        # Create README.md
        readme_content = f"""# {name}

**Created**: {datetime.now().strftime("%Y-%m-%d %H:%M")}
**Type**: {type}
**Description**: {description or "Research project created with Probaah"}

## Project Structure

- `input_files/` - Simulation input files
- `job_scripts/` - SLURM job scripts  
- `trajectories/` - Simulation outputs
- `analysis/` - Data analysis and results
- `notes/` - Research notes and observations

## Quick Commands

```bash
# Submit a job
probaah jobs submit input_files/current/simulation.xyz

# Check job status
probaah jobs status

# Add daily note
probaah project note "Today I worked on..."
```

---
*Generated by Probaah (‡¶™‡ßç‡ß∞‡¶¨‡¶æ‡¶π) - Where research flows naturally*
"""
        
        with open(Path(project_dir) / "README.md", "w") as f:
            f.write(readme_content)
        
        # Create project config
        config = {
            "project": {
                "name": name,
                "type": type,
                "created": datetime.now().isoformat(),
                "description": description
            },
            "settings": {
                "auto_backup": True,
                "email_notifications": True,
                "git_tracking": True
            }
        }
        
        with open(Path(project_dir) / ".probaah-config.yaml", "w") as f:
            yaml.dump(config, f, default_flow_style=False)
        
        # Initialize git repository
        os.chdir(project_dir)
        os.system("git init")
        os.system("git add .")
        os.system(f'git commit -m "Initial project setup with Probaah"')
        os.chdir("..")
        
        console.print(f"‚úÖ Project created successfully!")
        console.print(f"üìÅ Location: [bold]{os.path.abspath(project_dir)}[/bold]")
        console.print(f"üéØ Next: cd {project_dir}")
        
    except Exception as e:
        console.print(f"‚ùå Error creating project: {e}", style="red")

@project.command("list")
def list_projects():
    """List all Probaah projects in current directory"""
    
    projects = []
    for item in os.listdir("."):
        if os.path.isdir(item) and os.path.exists(f"{item}/.probaah-config.yaml"):
            try:
                with open(f"{item}/.probaah-config.yaml", "r") as f:
                    config = yaml.safe_load(f)
                    projects.append({
                        "name": config["project"]["name"],
                        "type": config["project"]["type"],
                        "created": config["project"]["created"][:10],  # Just date
                        "folder": item
                    })
            except:
                continue
    
    if not projects:
        console.print("No Probaah projects found in current directory")
        console.print("Create one with: [bold]probaah project create my-project[/bold]")
        return
    
    table = Table(title="üåä Probaah Projects")
    table.add_column("Name", style="cyan")
    table.add_column("Type", style="green")
    table.add_column("Created", style="yellow")
    table.add_column("Folder", style="blue")
    
    for project in projects:
        table.add_row(
            project["name"],
            project["type"],
            project["created"],
            project["folder"]
        )
    
    console.print(table)

@project.command("status")
def project_status():
    """Show current project status"""
    
    if not os.path.exists(".probaah-config.yaml"):
        console.print("‚ùå Not in a Probaah project directory", style="red")
        console.print("Run this command from inside a project folder")
        return
    
    try:
        with open(".probaah-config.yaml", "r") as f:
            config = yaml.safe_load(f)
        
        console.print(f"üìä [bold]Project Status[/bold]")
        console.print(f"Name: {config['project']['name']}")
        console.print(f"Type: {config['project']['type']}")
        console.print(f"Created: {config['project']['created'][:10]}")
        
        # Count files in different directories
        stats = {}
        for dir_name in ["input_files", "job_scripts", "trajectories", "analysis"]:
            if os.path.exists(dir_name):
                count = sum([len(files) for r, d, files in os.walk(dir_name)])
                stats[dir_name] = count
        
        console.print("\nüìÅ [bold]Directory Contents[/bold]")
        for dir_name, count in stats.items():
            console.print(f"{dir_name}: {count} files")
        
    except Exception as e:
        console.print(f"‚ùå Error reading project status: {e}", style="red")

@jobs.command("status")
@click.option("--user", default="akp6421", help="Cluster username")
def job_status(user):
    """Check SLURM job status on cluster"""
    
    console.print(f"üîç Checking jobs for user: [bold]{user}[/bold]")
    
    try:
        import paramiko
        
        # SSH connection (simplified for now)
        # In production, this would use stored SSH keys
        console.print("üîê Connecting to Roar Collab...")
        console.print("‚ÑπÔ∏è  SSH key authentication required")
        console.print("üí° Run: probaah config ssh --setup for first-time setup")
        
        # For now, just show the command they can run manually
        console.print("\nüìã [bold]Manual Check:[/bold]")
        console.print(f"ssh {user}@submit.aci.ics.psu.edu 'squeue -u {user}'")
        
    except ImportError:
        console.print("üì¶ Installing paramiko for SSH functionality...")
        os.system("pip install paramiko")
        console.print("‚úÖ Please run the command again")

@config.command("init")
@click.option("--user", default="anirban", help="Your name")
@click.option("--email", default="", help="Your email")
@click.option("--cluster", default="roar_collab", help="Default cluster")
def init_config(user, email, cluster):
    """Initialize Probaah configuration"""
    
    console.print("üîß [bold]Setting up Probaah configuration[/bold]")
    
    # Create config directory
    config_dir = Path.home() / ".probaah"
    config_dir.mkdir(exist_ok=True)
    
    # Create user profile
    profile = {
        "user": {
            "name": user,
            "email": email or f"{user}@psu.edu",
            "created": datetime.now().isoformat()
        },
        "clusters": {
            "roar_collab": {
                "hostname": "submit.aci.ics.psu.edu",
                "username": "akp6421",  # Default, can be changed
                "default_partition": "open",
                "max_time": "168:00:00"
            }
        },
        "settings": {
            "auto_backup": True,
            "email_notifications": False,  # Will enable after setup
            "default_project_type": "reaxff"
        }
    }
    
    config_file = config_dir / "user_profile.yaml"
    with open(config_file, "w") as f:
        yaml.dump(profile, f, default_flow_style=False)
    
    console.print(f"‚úÖ Configuration saved to: [bold]{config_file}[/bold]")
    console.print("üéØ Next steps:")
    console.print("  1. probaah config ssh --setup")
    console.print("  2. probaah project create my-first-project")

@config.command("show")
def show_config():
    """Show current configuration"""
    
    config_file = Path.home() / ".probaah" / "user_profile.yaml"
    
    if not config_file.exists():
        console.print("‚ùå No configuration found", style="red")
        console.print("Run: [bold]probaah config init[/bold]")
        return
    
    try:
        with open(config_file, "r") as f:
            config = yaml.safe_load(f)
        
        console.print("‚öôÔ∏è  [bold]Current Configuration[/bold]")
        console.print(f"User: {config['user']['name']}")
        console.print(f"Email: {config['user']['email']}")
        console.print(f"Default cluster: {list(config['clusters'].keys())[0]}")
        
    except Exception as e:
        console.print(f"‚ùå Error reading config: {e}", style="red")

# Add new command groups for analysis and presentation
@cli.group()
def analyze():
    """Advanced analysis with ASE and scientific tools"""
    pass

@cli.group()
def presentation():
    """Automated presentation generation"""
    pass

@cli.group()
def render():
    """Visualization and rendering tools"""
    pass

# AI-powered workflow automation
@cli.group()
def ai():
    """ü§ñ AI-powered workflow automation"""
    pass

# Analysis commands
@analyze.command("trajectory")
@click.argument("trajectory_file")
@click.option("--output-dir", default=None, help="Output directory")
@click.option("--bonds/--no-bonds", default=True, help="Analyze bonds")
@click.option("--rdf/--no-rdf", default=True, help="Calculate RDF")
@click.option("--energy/--no-energy", default=True, help="Analyze energy")
@click.option("--plots/--no-plots", default=True, help="Generate plots")
def analyze_trajectory(trajectory_file, output_dir, bonds, rdf, energy, plots):
    """Comprehensive trajectory analysis using ASE"""
    try:
        # Import the analyzer
        import sys
        sys.path.append('plugins/analysis/ase_tools')
        from trajectory_analyzer import analyze_trajectory_cli
        
        console.print(f"üî¨ [bold]Analyzing trajectory:[/bold] {trajectory_file}")
        
        results = analyze_trajectory_cli(
            trajectory_file=trajectory_file,
            output_dir=output_dir,
            bonds=bonds,
            rdf=rdf,
            energy=energy,
            plots=plots
        )
        
        console.print("‚úÖ [bold green]Analysis complete![/bold green]")
        
        # Show summary
        if bonds and 'bonds' in results:
            console.print(f"üìä Average bonds: {results['bonds']['avg_count']:.1f}")
        
        if output_dir:
            console.print(f"üìÅ Results saved to: [bold]{output_dir}[/bold]")
            
    except ImportError as e:
        console.print(f"‚ùå [red]Error importing analyzer: {e}[/red]")
        console.print("üí° Make sure all dependencies are installed: pip install ase matplotlib")
    except Exception as e:
        console.print(f"‚ùå [red]Analysis failed: {e}[/red]")

@analyze.command("bonds")
@click.argument("trajectory_file")
@click.option("--cutoff", default=1.2, help="Bond cutoff factor")
@click.option("--output", default="bond_analysis.png", help="Output plot file")
def analyze_bonds_only(trajectory_file, cutoff, output):
    """Quick bond analysis only"""
    try:
        import sys
        sys.path.append('plugins/analysis/ase_tools')
        from trajectory_analyzer import ProbaahTrajectoryAnalyzer
        
        console.print(f"üîó [bold]Bond analysis:[/bold] {trajectory_file}")
        
        analyzer = ProbaahTrajectoryAnalyzer(trajectory_file)
        results = analyzer.analyze_bonds(cutoff_factor=cutoff)
        plots = analyzer.create_plots()
        
        console.print(f"‚úÖ Average bonds: {results['avg_count']:.1f}")
        console.print(f"üìä Plot saved: {plots.get('bond_evolution', 'bond_evolution.png')}")
        
    except Exception as e:
        console.print(f"‚ùå [red]Bond analysis failed: {e}[/red]")

# Presentation commands
@presentation.command("create")
@click.argument("analysis_dir")
@click.option("--title", default="Research Update", help="Presentation title")
@click.option("--output", default="presentation.pptx", help="Output PowerPoint file")
@click.option("--style", default="weekly", help="Presentation style")
def create_presentation(analysis_dir, title, output, style):
    """Create automated research presentation"""
    try:
        import sys
        sys.path.append('plugins/presentation/pptx_generator')
        from research_slides import generate_presentation_cli
        
        console.print(f"üé® [bold]Creating presentation:[/bold] {title}")
        
        output_file = generate_presentation_cli(
            analysis_dir=analysis_dir,
            title=title,
            output=output,
            style=style
        )
        
        console.print(f"‚úÖ [bold green]Presentation created:[/bold green] {output_file}")
        console.print("üí° Open in PowerPoint to view and edit")
        
    except ImportError as e:
        console.print(f"‚ùå [red]Error importing presentation generator: {e}[/red]")
        console.print("üí° Make sure python-pptx is installed: pip install python-pptx")
    except Exception as e:
        console.print(f"‚ùå [red]Presentation creation failed: {e}[/red]")

@presentation.command("weekly")
@click.option("--project-dir", default=".", help="Project directory")
@click.option("--title", default=None, help="Custom title")
def weekly_update(project_dir, title):
    """Generate weekly update presentation from current project"""
    try:
        import os
        from datetime import datetime
        
        # Check if we're in a Probaah project
        if not os.path.exists(".probaah-config.yaml"):
            console.print("‚ùå [red]Not in a Probaah project directory[/red]")
            console.print("üí° Run this from inside a project folder")
            return
        
        # Look for analysis directory
        analysis_dirs = ["analysis", "trajectories/processed", "."]
        analysis_dir = None
        for d in analysis_dirs:
            if os.path.exists(os.path.join(d, "analysis_results.json")):
                analysis_dir = d
                break
        
        if not analysis_dir:
            console.print("‚ùå [red]No analysis results found[/red]")
            console.print("üí° Run 'probaah analyze trajectory your_file.xyz' first")
            return
        
        # Generate presentation
        if not title:
            project_name = os.path.basename(os.getcwd())
            title = f"{project_name} - Weekly Update"
        
        date_str = datetime.now().strftime("%Y%m%d")
        output_file = f"weekly_update_{date_str}.pptx"
        
        import sys
        sys.path.append('plugins/presentation/pptx_generator')
        from research_slides import create_weekly_update_presentation
        
        result = create_weekly_update_presentation(analysis_dir, output_file, title)
        console.print(f"‚úÖ [bold green]Weekly update created:[/bold green] {result}")
        
    except Exception as e:
        console.print(f"‚ùå [red]Weekly update failed: {e}[/red]")

# Rendering commands
@render.command("trajectory")
@click.argument("trajectory_file")
@click.option("--output", default="trajectory.mp4", help="Output video file")
@click.option("--frames", default=10, help="Number of frames to render")
@click.option("--style", default="publication", help="Rendering style")
def render_trajectory(trajectory_file, output, frames, style):
    """Render trajectory as video using ASE"""
    try:
        import sys
        sys.path.append('plugins/analysis/ase_tools')
        from ase.io import read
        from ase.visualize.plot import plot_atoms
        import matplotlib.pyplot as plt
        import matplotlib.animation as animation
        
        console.print(f"üé¨ [bold]Rendering trajectory:[/bold] {trajectory_file}")
        
        # Load trajectory
        traj = read(trajectory_file, index=f'::{len(read(trajectory_file, index=":"))//frames}')
        
        # Create animation
        fig, ax = plt.subplots(figsize=(10, 8))
        
        def animate(frame):
            ax.clear()
            plot_atoms(traj[frame], ax=ax, radii=0.5)
            ax.set_title(f"Frame {frame}")
            return ax,
        
        anim = animation.FuncAnimation(fig, animate, frames=len(traj), 
                                     interval=200, blit=False)
        
        # Save as MP4
        Writer = animation.writers['ffmpeg']
        writer = Writer(fps=5, metadata=dict(artist='Probaah'), bitrate=1800)
        anim.save(output, writer=writer)
        
        console.print(f"‚úÖ [bold green]Video saved:[/bold green] {output}")
        
    except Exception as e:
        console.print(f"‚ùå [red]Rendering failed: {e}[/red]")
        console.print("üí° Note: Video rendering requires ffmpeg")

# Quick workflow command
@cli.command("workflow")
@click.argument("trajectory_file")
@click.option("--title", default="Analysis Results", help="Presentation title")
def full_workflow(trajectory_file, title):
    """Complete analysis + presentation workflow"""
    console.print("üöÄ [bold blue]Running complete Probaah workflow![/bold blue]")
    
    # Step 1: Analysis
    console.print("\nüìä Step 1: Trajectory Analysis")
    try:
        import sys
        sys.path.append('plugins/analysis/ase_tools')
        from trajectory_analyzer import analyze_trajectory_cli
        
        results = analyze_trajectory_cli(trajectory_file, bonds=True, rdf=True, energy=True, plots=True)
        console.print("‚úÖ Analysis complete")
        
    except Exception as e:
        console.print(f"‚ùå Analysis failed: {e}")
        return
    
    # Step 2: Presentation
    console.print("\nüé® Step 2: Presentation Generation")
    try:
        import sys
        sys.path.append('plugins/presentation/pptx_generator')
        from research_slides import create_weekly_update_presentation
        
        analysis_dir = Path(trajectory_file).parent / "analysis"
        output_file = f"{title.replace(' ', '_')}_presentation.pptx"
        
        create_weekly_update_presentation(str(analysis_dir), output_file, title)
        console.print("‚úÖ Presentation created")
        
    except Exception as e:
        console.print(f"‚ùå Presentation failed: {e}")
    
    console.print(f"\nüéâ [bold green]Workflow complete![/bold green]")
    console.print("üìÅ Check the analysis/ directory for results")
    console.print(f"üìä Open {output_file} for presentation")

# AI Commands
@ai.command("process")
@click.argument("request")
@click.option("--config", default=None, help="Path to AI configuration file")
def ai_process(request, config):
    """Process natural language request"""
    try:
        import sys
        import os
        # Add plugins directory to path (works from any directory)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        plugins_dir = os.path.join(os.path.dirname(script_dir), 'plugins')
        if plugins_dir not in sys.path:
            sys.path.insert(0, plugins_dir)
        from ai.orchestrator import process_natural_language_cli
        
        console.print(f"ü§ñ [bold blue]AI Processing Request[/bold blue]")
        console.print(f"üìù Request: {request}")
        
        results = process_natural_language_cli(request, config)
        
        if results['success']:
            console.print("‚úÖ [bold green]AI workflow completed successfully![/bold green]")
        else:
            console.print("‚ùå [bold red]AI workflow failed[/bold red]")
            if 'error' in results:
                console.print(f"Error: {results['error']}")
                
    except ImportError as e:
        console.print(f"‚ùå [red]AI components not available: {e}[/red]")
        console.print("üí° Make sure AI plugins are properly installed")
    except Exception as e:
        console.print(f"‚ùå [red]AI processing failed: {e}[/red]")

@ai.command("substitute")
@click.argument("input_structure")
@click.option("--remove", required=True, help="Species to remove (e.g., O2)")
@click.option("--add", required=True, help="Species to add (e.g., O)")
@click.option("--count", default=100, help="Number of molecules to add")
@click.option("--density", default=0.18, help="Target density")
@click.option("--geometry", default="gas-box:23x23x23,final-box:24x140x80", help="Geometry specification")
@click.option("--visual-validation/--no-visual-validation", default=True, help="Run visual validation")
@click.option("--output", default=None, help="Output file path")
def ai_substitute(input_structure, remove, add, count, density, geometry, visual_validation, output):
    """AI-powered gas substitution using PACKMOL"""
    try:
        import sys
        import os
        # Add plugins directory to path (works from any directory)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        plugins_dir = os.path.join(os.path.dirname(script_dir), 'plugins')
        if plugins_dir not in sys.path:
            sys.path.insert(0, plugins_dir)
        from ai.packmol_wrapper import packmol_substitute_cli
        
        console.print(f"üß™ [bold blue]AI Gas Substitution[/bold blue]")
        console.print(f"üìÅ Input: {input_structure}")
        console.print(f"üîÑ Remove: {remove}, Add: {add} (count: {count})")
        
        results = packmol_substitute_cli(
            input_structure=input_structure,
            remove_species=remove,
            add_species=add,
            count=count,
            density=density,
            geometry=geometry,
            visual_validation=visual_validation,
            output_file=output
        )
        
        if results['success']:
            console.print("‚úÖ [bold green]Gas substitution completed![/bold green]")
            console.print(f"üìÅ Output: {results['output_structure']}")
            if visual_validation and 'validation' in results:
                if results['validation']['approved']:
                    console.print("‚úÖ Structure validation passed")
                else:
                    console.print("‚ö†Ô∏è  Structure validation found issues")
        else:
            console.print("‚ùå [bold red]Gas substitution failed[/bold red]")
            if 'error' in results:
                console.print(f"Error: {results['error']}")
                
    except ImportError as e:
        console.print(f"‚ùå [red]PACKMOL wrapper not available: {e}[/red]")
        console.print("üí° Make sure PACKMOL is installed and AI plugins are available")
    except Exception as e:
        console.print(f"‚ùå [red]Gas substitution failed: {e}[/red]")

@ai.command("validate")
@click.argument("structure_file")
@click.option("--interactive/--no-interactive", default=True, help="Interactive validation")
@click.option("--save-images/--no-save-images", default=False, help="Save validation images")
def ai_validate(structure_file, interactive, save_images):
    """AI-powered structure validation using VIAMD"""
    try:
        import sys
        import os
        # Add plugins directory to path (works from any directory)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        plugins_dir = os.path.join(os.path.dirname(script_dir), 'plugins')
        if plugins_dir not in sys.path:
            sys.path.insert(0, plugins_dir)
        from ai.visual_validation import validate_structure_cli
        
        console.print(f"üîç [bold blue]AI Structure Validation[/bold blue]")
        console.print(f"üìÅ Structure: {structure_file}")
        
        results = validate_structure_cli(
            structure_file=structure_file,
            interactive=interactive,
            save_images=save_images
        )
        
        validation_result = results['validation_result']
        if validation_result['approved']:
            console.print("‚úÖ [bold green]Structure validation passed![/bold green]")
        else:
            console.print("‚ö†Ô∏è  [bold yellow]Structure validation found issues[/bold yellow]")
            if 'issues' in validation_result:
                for issue in validation_result['issues']:
                    console.print(f"   ‚Ä¢ {issue}")
        
        if save_images and results['saved_images']:
            console.print(f"üì∏ Validation images saved: {len(results['saved_images'])} files")
                
    except ImportError as e:
        console.print(f"‚ùå [red]VIAMD wrapper not available: {e}[/red]")
        console.print("üí° Make sure VIAMD is installed and AI plugins are available")
    except Exception as e:
        console.print(f"‚ùå [red]Structure validation failed: {e}[/red]")

@ai.command("chat")
@click.option("--config", default=None, help="Path to AI configuration file")
def ai_chat(config):
    """Interactive AI chat mode"""
    try:
        import sys
        import os
        # Add plugins directory to path (works from any directory)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        plugins_dir = os.path.join(os.path.dirname(script_dir), 'plugins')
        if plugins_dir not in sys.path:
            sys.path.insert(0, plugins_dir)
        from ai.orchestrator import ProbaahAIOrchestrator
        
        console.print("ü§ñ [bold blue]Probaah AI Chat Mode[/bold blue]")
        console.print("üí¨ Type your requests in natural language")
        console.print("üìù Examples:")
        console.print("   ‚Ä¢ substitute O2 with 100 O radicals in membrane.bgf")
        console.print("   ‚Ä¢ analyze trajectory simulation.xyz with bond analysis")
        console.print("   ‚Ä¢ validate structure output.xyz")
        console.print("   ‚Ä¢ create presentation from analysis results")
        console.print("üö™ Type 'exit' or 'quit' to leave chat mode")
        console.print()
        
        orchestrator = ProbaahAIOrchestrator(config)
        
        while True:
            try:
                request = input("ü§ñ Probaah AI> ").strip()
                
                if request.lower() in ['exit', 'quit', 'bye']:
                    console.print("üëã Goodbye!")
                    break
                
                if not request:
                    continue
                
                console.print()
                results = orchestrator.process_request(request)
                console.print()
                
                if results['success']:
                    console.print("‚úÖ [bold green]Request completed![/bold green]")
                else:
                    console.print("‚ùå [bold red]Request failed[/bold red]")
                    if 'error' in results:
                        console.print(f"Error: {results['error']}")
                
                console.print()
                
            except KeyboardInterrupt:
                console.print("\nüëã Goodbye!")
                break
            except Exception as e:
                console.print(f"‚ùå [red]Chat error: {e}[/red]")
                
    except ImportError as e:
        console.print(f"‚ùå [red]AI chat not available: {e}[/red]")
        console.print("üí° Make sure AI plugins are properly installed")
    except Exception as e:
        console.print(f"‚ùå [red]Chat initialization failed: {e}[/red]")

@ai.command("status")
def ai_status():
    """Show AI tools status"""
    try:
        import sys
        import os
        # Add plugins directory to path (works from any directory)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        plugins_dir = os.path.join(os.path.dirname(script_dir), 'plugins')
        if plugins_dir not in sys.path:
            sys.path.insert(0, plugins_dir)
        from ai.orchestrator import ProbaahAIOrchestrator
        
        console.print("üîß [bold blue]AI Tools Status[/bold blue]")
        
        orchestrator = ProbaahAIOrchestrator()
        status = orchestrator.get_tool_status()
        
        table = Table(title="AI Tool Availability")
        table.add_column("Tool", style="cyan")
        table.add_column("Status", style="green")
        table.add_column("Type", style="yellow")
        
        for tool_name, tool_info in status.items():
            status_icon = "‚úÖ" if tool_info['available'] else "‚ùå"
            table.add_row(
                tool_name,
                status_icon,
                tool_info['type']
            )
        
        console.print(table)
        
        # Show recommendations
        missing_tools = [name for name, info in status.items() if not info['available']]
        if missing_tools:
            console.print("\nüí° [bold yellow]Missing Tools:[/bold yellow]")
            console.print("   ‚Ä¢ Install PACKMOL: conda install -c conda-forge packmol")
            console.print("   ‚Ä¢ Install VIAMD: Download from official website")
            console.print("   ‚Ä¢ Install ASE: pip install ase")
            console.print("   ‚Ä¢ Install python-pptx: pip install python-pptx")
        else:
            console.print("\n‚úÖ [bold green]All AI tools are available![/bold green]")
            
    except ImportError as e:
        console.print(f"‚ùå [red]AI status not available: {e}[/red]")
    except Exception as e:
        console.print(f"‚ùå [red]Status check failed: {e}[/red]")

# Enhanced existing commands with AI
@analyze.command("ai-insights")
@click.argument("trajectory_file")
@click.option("--model", default="gpt-4o", help="AI model to use")
@click.option("--generate-report/--no-generate-report", default=True, help="Generate AI insights report")
def analyze_ai_insights(trajectory_file, model, generate_report):
    """Enhanced trajectory analysis with AI insights"""
    try:
        import sys
        import os
        # Add plugins directory to path (works from any directory)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        plugins_dir = os.path.join(os.path.dirname(script_dir), 'plugins')
        if plugins_dir not in sys.path:
            sys.path.insert(0, plugins_dir)
        from ai.workflows.ai_enhanced_analysis import ai_enhanced_trajectory_analysis
        
        console.print(f"üî¨ü§ñ [bold blue]AI-Enhanced Trajectory Analysis[/bold blue]")
        console.print(f"üìÅ Input: {trajectory_file}")
        console.print(f"üß† AI Model: {model}")
        
        # Run AI-enhanced analysis
        results = ai_enhanced_trajectory_analysis(trajectory_file, ai_model=model)
        
        console.print("‚úÖ [bold green]AI-enhanced analysis complete![/bold green]")
        
        # Show summary
        if 'ai_insights' in results:
            console.print("\nüß† [bold]AI Insights:[/bold]")
            insights = results['ai_insights']
            if 'key_findings' in insights:
                for finding in insights['key_findings']:
                    console.print(f"   ‚Ä¢ {finding}")
            
            if 'recommendations' in insights:
                console.print("\nüí° [bold]AI Recommendations:[/bold]")
                for rec in insights['recommendations']:
                    console.print(f"   ‚Ä¢ {rec}")
                
    except ImportError as e:
        console.print(f"‚ùå [red]AI-enhanced analysis not available: {e}[/red]")
        console.print("üí° Make sure AI plugins and analysis tools are installed")
    except Exception as e:
        console.print(f"‚ùå [red]AI-enhanced analysis failed: {e}[/red]")

@presentation.command("ai-enhance")
@click.argument("presentation_file")
@click.option("--add-insights/--no-add-insights", default=True, help="Add AI insights")
@click.option("--update-content/--no-update-content", default=True, help="Update content with AI")
def presentation_ai_enhance(presentation_file, add_insights, update_content):
    """Enhance presentation with AI-generated content"""
    try:
        import sys
        import os
        # Add plugins directory to path (works from any directory)
        script_dir = os.path.dirname(os.path.abspath(__file__))
        plugins_dir = os.path.join(os.path.dirname(script_dir), 'plugins')
        if plugins_dir not in sys.path:
            sys.path.insert(0, plugins_dir)
        from ai.workflows.ai_enhanced_analysis import ai_enhanced_presentation
        
        console.print(f"üé®ü§ñ [bold blue]AI-Enhanced Presentation[/bold blue]")
        console.print(f"üìä Input: {presentation_file}")
        
        # Load analysis results (would be more sophisticated in production)
        analysis_results = {}
        
        # Run AI-enhanced presentation
        results = ai_enhanced_presentation(presentation_file, analysis_results)
        
        console.print("‚úÖ [bold green]AI-enhanced presentation complete![/bold green]")
        console.print(f"üìÅ Output: {results}")
        
    except ImportError as e:
        console.print(f"‚ùå [red]AI-enhanced presentation not available: {e}[/red]")
        console.print("üí° Make sure AI plugins and presentation tools are installed")
    except Exception as e:
        console.print(f"‚ùå [red]AI-enhanced presentation failed: {e}[/red]")

# Entry point for pip installation
def main():
    cli()

if __name__ == "__main__":
    main()
